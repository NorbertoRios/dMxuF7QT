package test

import (
	"genx-go/core/filter"
	"genx-go/core/request"
	"genx-go/core/usecase"
	"genx-go/message"
	"genx-go/test/mock"
	"testing"
)

func TestLocationRequestLogic(t *testing.T) {
	factory := message.Factory()
	req := &request.BaseRequest{
		FacadeCallbackID: "test_callback",
		Identity:         "genx_000003870006",
		TTL:              300,
	}
	device := mock.NewDevice()
	usecase.NewLocationUseCase(device, req).Launch()
	f := filter.NewObserversFilter(device.Observable())
	lRequest := device.LocationRequest()
	if len(f.Extract(lRequest.CurrentTask())) == 0 {
		t.Error("Observers count unexpected 0")
	}
	rMessage := factory.BuildRawMessage([]byte{0x33, 0x36, 0x30, 0x30, 0x32, 0x39, 0x39, 0x36, 0x00, 0x00, 0x00, 0x57, 0xc6, 0x00, 0x18, 0x5e, 0xc6, 0x4a, 0x48, 0x0a, 0x7b, 0x57, 0x16, 0x08, 0x11, 0xc3, 0xac, 0x00, 0x04, 0xf5, 0x5c, 0x06, 0x06, 0x01, 0x39, 0x01, 0x02, 0x00, 0x99, 0x00, 0x00, 0x63, 0x9f, 0x2a, 0x73, 0xf5, 0x01, 0x80, 0x2b, 0xc7, 0x38, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x2A, 0x0D, 0x2A, 0x0F, 0x23, 0x0F, 0xE3})
	usecase.NewMessageArrivedUseCase(device, rMessage).Launch()
	task := device.LocationRequest().CurrentTask()
	f = filter.NewObserversFilter(device.Observable())
	if len(f.Extract(task)) != 0 {
		t.Error("Observers count more than 0")
	}
}
